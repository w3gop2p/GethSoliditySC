// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abigen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// MyERC1155TokenMetaData contains all meta data concerning the MyERC1155Token contract.
var MyERC1155TokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIELD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWORD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b50604051613c88380380613c8883398181016040528101906100319190610b41565b80604051806060016040528060298152602001613c5f6029913961005a8161016a60201b60201c565b505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100cb575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100c29190610b7b565b60405180910390fd5b6100da8161017d60201b60201c565b506100fd335f6103e860405180602001604052805f81525061024060201b60201c565b6101203360016103e860405180602001604052805f81525061024060201b60201c565b610142336002600a60405180602001604052805f81525061024060201b60201c565b610164336003600a60405180602001604052805f81525061024060201b60201c565b50611210565b80600290816101799190610dce565b5050565b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036102b0575f6040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016102a79190610b7b565b60405180910390fd5b5f806102c285856102e160201b60201c565b915091506102d95f8784848761031160201b60201c565b505050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b610323858585856103d560201b60201c565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146103ce575f61036561076b60201b60201c565b905060018451036103b7575f6103845f8661077260201b90919060201c565b90505f61039a5f8661077260201b90919060201c565b90506103b083898985858961078560201b60201c565b50506103cc565b6103cb81878787878761093460201b60201c565b5b505b5050505050565b805182511461041f57815181516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610416929190610eac565b60405180910390fd5b5f61042e61076b60201b60201c565b90505f5b835181101561062a575f61044f828661077260201b90919060201c565b90505f610465838661077260201b90919060201c565b90505f73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610588575f805f8481526020019081526020015f205f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508181101561053457888183856040517f03dee4c500000000000000000000000000000000000000000000000000000000815260040161052b9493929190610ed3565b60405180910390fd5b8181035f808581526020019081526020015f205f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461061d57805f808481526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546106159190610f43565b925050819055505b5050806001019050610432565b5060018351036106e5575f6106485f8561077260201b90919060201c565b90505f61065e5f8561077260201b90919060201c565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516106d6929190610eac565b60405180910390a45050610764565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161075b92919061102d565b60405180910390a45b5050505050565b5f33905090565b5f60208202602084010151905092915050565b5f8473ffffffffffffffffffffffffffffffffffffffff163b111561092c578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016107e59594939291906110d2565b6020604051808303815f875af192505050801561082057506040513d601f19601f8201168201806040525081019061081d919061117f565b60015b6108a1573d805f811461084e576040519150601f19603f3d011682016040523d82523d5f602084013e610853565b606091505b505f81510361089957846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016108909190610b7b565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461092a57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016109219190610b7b565b60405180910390fd5b505b505050505050565b5f8473ffffffffffffffffffffffffffffffffffffffff163b1115610adb578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016109949594939291906111aa565b6020604051808303815f875af19250505080156109cf57506040513d601f19601f820116820180604052508101906109cc919061117f565b60015b610a50573d805f81146109fd576040519150601f19603f3d011682016040523d82523d5f602084013e610a02565b606091505b505f815103610a4857846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401610a3f9190610b7b565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610ad957846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401610ad09190610b7b565b60405180910390fd5b505b505050505050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610b1082610ae7565b9050919050565b610b2081610b06565b8114610b2a575f80fd5b50565b5f81519050610b3b81610b17565b92915050565b5f60208284031215610b5657610b55610ae3565b5b5f610b6384828501610b2d565b91505092915050565b610b7581610b06565b82525050565b5f602082019050610b8e5f830184610b6c565b92915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610c0f57607f821691505b602082108103610c2257610c21610bcb565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610c847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c49565b610c8e8683610c49565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f610cd2610ccd610cc884610ca6565b610caf565b610ca6565b9050919050565b5f819050919050565b610ceb83610cb8565b610cff610cf782610cd9565b848454610c55565b825550505050565b5f90565b610d13610d07565b610d1e818484610ce2565b505050565b5b81811015610d4157610d365f82610d0b565b600181019050610d24565b5050565b601f821115610d8657610d5781610c28565b610d6084610c3a565b81016020851015610d6f578190505b610d83610d7b85610c3a565b830182610d23565b50505b505050565b5f82821c905092915050565b5f610da65f1984600802610d8b565b1980831691505092915050565b5f610dbe8383610d97565b9150826002028217905092915050565b610dd782610b94565b67ffffffffffffffff811115610df057610def610b9e565b5b610dfa8254610bf8565b610e05828285610d45565b5f60209050601f831160018114610e36575f8415610e24578287015190505b610e2e8582610db3565b865550610e95565b601f198416610e4486610c28565b5f5b82811015610e6b57848901518255600182019150602085019450602081019050610e46565b86831015610e885784890151610e84601f891682610d97565b8355505b6001600288020188555050505b505050505050565b610ea681610ca6565b82525050565b5f604082019050610ebf5f830185610e9d565b610ecc6020830184610e9d565b9392505050565b5f608082019050610ee65f830187610b6c565b610ef36020830186610e9d565b610f006040830185610e9d565b610f0d6060830184610e9d565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610f4d82610ca6565b9150610f5883610ca6565b9250828201905080821115610f7057610f6f610f16565b5b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610fa881610ca6565b82525050565b5f610fb98383610f9f565b60208301905092915050565b5f602082019050919050565b5f610fdb82610f76565b610fe58185610f80565b9350610ff083610f90565b805f5b838110156110205781516110078882610fae565b975061101283610fc5565b925050600181019050610ff3565b5085935050505092915050565b5f6040820190508181035f8301526110458185610fd1565b905081810360208301526110598184610fd1565b90509392505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6110a482611062565b6110ae818561106c565b93506110be81856020860161107c565b6110c78161108a565b840191505092915050565b5f60a0820190506110e55f830188610b6c565b6110f26020830187610b6c565b6110ff6040830186610e9d565b61110c6060830185610e9d565b818103608083015261111e818461109a565b90509695505050505050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61115e8161112a565b8114611168575f80fd5b50565b5f8151905061117981611155565b92915050565b5f6020828403121561119457611193610ae3565b5b5f6111a18482850161116b565b91505092915050565b5f60a0820190506111bd5f830188610b6c565b6111ca6020830187610b6c565b81810360408301526111dc8186610fd1565b905081810360608301526111f08185610fd1565b90508181036080830152611204818461109a565b90509695505050505050565b612a428061121d5f395ff3fe608060405234801561000f575f80fd5b506004361061011e575f3560e01c80636b20c454116100ab578063e3e55f081161006f578063e3e55f08146102f0578063e985e9c51461030e578063f242432a1461033e578063f2fde38b1461035a578063f5298aca146103765761011e565b80636b20c45414610274578063715018a614610290578063731133e91461029a5780638da5cb5b146102b6578063a22cb465146102d45761011e565b80631f7fdffa116100f25780631f7fdffa146101d05780632eb2c2d6146101ec5780633e4bee38146102085780634e1273f4146102265780635b2725ed146102565761011e565b8062fdd58e1461012257806301ffc9a7146101525780630e89341c1461018257806313dc989f146101b2575b5f80fd5b61013c60048036038101906101379190611afc565b610392565b6040516101499190611b49565b60405180910390f35b61016c60048036038101906101679190611bb7565b6103e7565b6040516101799190611bfc565b60405180910390f35b61019c60048036038101906101979190611c15565b6104c8565b6040516101a99190611cb0565b60405180910390f35b6101ba61057a565b6040516101c79190611b49565b60405180910390f35b6101ea60048036038101906101e59190611ec0565b61057f565b005b61020660048036038101906102019190611f78565b610599565b005b610210610640565b60405161021d9190611b49565b60405180910390f35b610240600480360381019061023b9190612103565b610644565b60405161024d9190612230565b60405180910390f35b61025e61074b565b60405161026b9190611b49565b60405180910390f35b61028e60048036038101906102899190612250565b610750565b005b6102986107ce565b005b6102b460048036038101906102af91906122d8565b6107e1565b005b6102be6107fb565b6040516102cb9190612367565b60405180910390f35b6102ee60048036038101906102e991906123aa565b610823565b005b6102f8610839565b6040516103059190611b49565b60405180910390f35b610328600480360381019061032391906123e8565b61083e565b6040516103359190611bfc565b60405180910390f35b61035860048036038101906103539190612426565b6108cc565b005b610374600480360381019061036f91906124b9565b610973565b005b610390600480360381019061038b91906124e4565b6109f7565b005b5f805f8381526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f7fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104b157507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104c157506104c082610a75565b5b9050919050565b60605f82036104f1576040518060800160405280605b81526020016128f8605b91399050610575565b60018203610519576040518060800160405280605d8152602001612953605d91399050610575565b60028203610541576040518060800160405280605c815260200161289c605c91399050610575565b60038203610569576040518060800160405280605d81526020016129b0605d91399050610575565b61057282610ade565b90505b919050565b600281565b610587610b70565b61059384848484610bf7565b50505050565b5f6105a2610c7a565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156105e757506105e5868261083e565b155b1561062b5780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401610622929190612534565b60405180910390fd5b6106388686868686610c81565b505050505050565b5f81565b6060815183511461069057815183516040517f5b05999100000000000000000000000000000000000000000000000000000000815260040161068792919061255b565b60405180910390fd5b5f835167ffffffffffffffff8111156106ac576106ab611cd4565b5b6040519080825280602002602001820160405280156106da5781602001602082028036833780820191505090505b5090505f5b8451811015610740576107166106fe8287610d7590919063ffffffff16565b6107118387610d8890919063ffffffff16565b610392565b82828151811061072957610728612582565b5b6020026020010181815250508060010190506106df565b508091505092915050565b600381565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b5906125f9565b60405180910390fd5b6107c9838383610d9b565b505050565b6107d6610b70565b6107df5f610e2b565b565b6107e9610b70565b6107f584848484610eee565b50505050565b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61083561082e610c7a565b8383610f83565b5050565b600181565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f6108d5610c7a565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415801561091a5750610918868261083e565b155b1561095e5780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401610955929190612534565b60405180910390fd5b61096b86868686866110ec565b505050505050565b61097b610b70565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109eb575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109e29190612367565b60405180910390fd5b6109f481610e2b565b50565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c906125f9565b60405180910390fd5b610a708383836111f2565b505050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b606060028054610aed90612644565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1990612644565b8015610b645780601f10610b3b57610100808354040283529160200191610b64565b820191905f5260205f20905b815481529060010190602001808311610b4757829003601f168201915b50505050509050919050565b610b78610c7a565b73ffffffffffffffffffffffffffffffffffffffff16610b966107fb565b73ffffffffffffffffffffffffffffffffffffffff1614610bf557610bb9610c7a565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610bec9190612367565b60405180910390fd5b565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610c67575f6040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401610c5e9190612367565b60405180910390fd5b610c745f85858585611294565b50505050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610cf1575f6040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401610ce89190612367565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610d61575f6040517f01a83514000000000000000000000000000000000000000000000000000000008152600401610d589190612367565b60405180910390fd5b610d6e8585858585611294565b5050505050565b5f60208202602084010151905092915050565b5f60208202602084010151905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e0b575f6040517f01a83514000000000000000000000000000000000000000000000000000000008152600401610e029190612367565b60405180910390fd5b610e26835f848460405180602001604052805f815250611294565b505050565b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610f5e575f6040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401610f559190612367565b60405180910390fd5b5f80610f6a8585611340565b91509150610f7b5f87848487611294565b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ff3575f6040517fced3e100000000000000000000000000000000000000000000000000000000008152600401610fea9190612367565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110df9190611bfc565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361115c575f6040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016111539190612367565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036111cc575f6040517f01a835140000000000000000000000000000000000000000000000000000000081526004016111c39190612367565b60405180910390fd5b5f806111d88585611340565b915091506111e98787848487611294565b50505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611262575f6040517f01a835140000000000000000000000000000000000000000000000000000000081526004016112599190612367565b60405180910390fd5b5f8061126e8484611340565b9150915061128d855f848460405180602001604052805f815250611294565b5050505050565b6112a085858585611370565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611339575f6112dc610c7a565b90506001845103611328575f6112fb5f86610d8890919063ffffffff16565b90505f6113115f86610d8890919063ffffffff16565b9050611321838989858589611700565b5050611337565b6113368187878787876118af565b5b505b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b80518251146113ba57815181516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004016113b192919061255b565b60405180910390fd5b5f6113c3610c7a565b90505f5b83518110156115bf575f6113e48286610d8890919063ffffffff16565b90505f6113fa8386610d8890919063ffffffff16565b90505f73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461151d575f805f8481526020019081526020015f205f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156114c957888183856040517f03dee4c50000000000000000000000000000000000000000000000000000000081526004016114c09493929190612674565b60405180910390fd5b8181035f808581526020019081526020015f205f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146115b257805f808481526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546115aa91906126e4565b925050819055505b50508060010190506113c7565b50600183510361167a575f6115dd5f85610d8890919063ffffffff16565b90505f6115f35f85610d8890919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62858560405161166b92919061255b565b60405180910390a450506116f9565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516116f0929190612717565b60405180910390a45b5050505050565b5f8473ffffffffffffffffffffffffffffffffffffffff163b11156118a7578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161176095949392919061279e565b6020604051808303815f875af192505050801561179b57506040513d601f19601f82011682018060405250810190611798919061280a565b60015b61181c573d805f81146117c9576040519150601f19603f3d011682016040523d82523d5f602084013e6117ce565b606091505b505f81510361181457846040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161180b9190612367565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146118a557846040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161189c9190612367565b60405180910390fd5b505b505050505050565b5f8473ffffffffffffffffffffffffffffffffffffffff163b1115611a56578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161190f959493929190612835565b6020604051808303815f875af192505050801561194a57506040513d601f19601f82011682018060405250810190611947919061280a565b60015b6119cb573d805f8114611978576040519150601f19603f3d011682016040523d82523d5f602084013e61197d565b606091505b505f8151036119c357846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016119ba9190612367565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611a5457846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611a4b9190612367565b60405180910390fd5b505b505050505050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611a9882611a6f565b9050919050565b611aa881611a8e565b8114611ab2575f80fd5b50565b5f81359050611ac381611a9f565b92915050565b5f819050919050565b611adb81611ac9565b8114611ae5575f80fd5b50565b5f81359050611af681611ad2565b92915050565b5f8060408385031215611b1257611b11611a67565b5b5f611b1f85828601611ab5565b9250506020611b3085828601611ae8565b9150509250929050565b611b4381611ac9565b82525050565b5f602082019050611b5c5f830184611b3a565b92915050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b9681611b62565b8114611ba0575f80fd5b50565b5f81359050611bb181611b8d565b92915050565b5f60208284031215611bcc57611bcb611a67565b5b5f611bd984828501611ba3565b91505092915050565b5f8115159050919050565b611bf681611be2565b82525050565b5f602082019050611c0f5f830184611bed565b92915050565b5f60208284031215611c2a57611c29611a67565b5b5f611c3784828501611ae8565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611c8282611c40565b611c8c8185611c4a565b9350611c9c818560208601611c5a565b611ca581611c68565b840191505092915050565b5f6020820190508181035f830152611cc88184611c78565b905092915050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611d0a82611c68565b810181811067ffffffffffffffff82111715611d2957611d28611cd4565b5b80604052505050565b5f611d3b611a5e565b9050611d478282611d01565b919050565b5f67ffffffffffffffff821115611d6657611d65611cd4565b5b602082029050602081019050919050565b5f80fd5b5f611d8d611d8884611d4c565b611d32565b90508083825260208201905060208402830185811115611db057611daf611d77565b5b835b81811015611dd95780611dc58882611ae8565b845260208401935050602081019050611db2565b5050509392505050565b5f82601f830112611df757611df6611cd0565b5b8135611e07848260208601611d7b565b91505092915050565b5f80fd5b5f67ffffffffffffffff821115611e2e57611e2d611cd4565b5b611e3782611c68565b9050602081019050919050565b828183375f83830152505050565b5f611e64611e5f84611e14565b611d32565b905082815260208101848484011115611e8057611e7f611e10565b5b611e8b848285611e44565b509392505050565b5f82601f830112611ea757611ea6611cd0565b5b8135611eb7848260208601611e52565b91505092915050565b5f805f8060808587031215611ed857611ed7611a67565b5b5f611ee587828801611ab5565b945050602085013567ffffffffffffffff811115611f0657611f05611a6b565b5b611f1287828801611de3565b935050604085013567ffffffffffffffff811115611f3357611f32611a6b565b5b611f3f87828801611de3565b925050606085013567ffffffffffffffff811115611f6057611f5f611a6b565b5b611f6c87828801611e93565b91505092959194509250565b5f805f805f60a08688031215611f9157611f90611a67565b5b5f611f9e88828901611ab5565b9550506020611faf88828901611ab5565b945050604086013567ffffffffffffffff811115611fd057611fcf611a6b565b5b611fdc88828901611de3565b935050606086013567ffffffffffffffff811115611ffd57611ffc611a6b565b5b61200988828901611de3565b925050608086013567ffffffffffffffff81111561202a57612029611a6b565b5b61203688828901611e93565b9150509295509295909350565b5f67ffffffffffffffff82111561205d5761205c611cd4565b5b602082029050602081019050919050565b5f61208061207b84612043565b611d32565b905080838252602082019050602084028301858111156120a3576120a2611d77565b5b835b818110156120cc57806120b88882611ab5565b8452602084019350506020810190506120a5565b5050509392505050565b5f82601f8301126120ea576120e9611cd0565b5b81356120fa84826020860161206e565b91505092915050565b5f806040838503121561211957612118611a67565b5b5f83013567ffffffffffffffff81111561213657612135611a6b565b5b612142858286016120d6565b925050602083013567ffffffffffffffff81111561216357612162611a6b565b5b61216f85828601611de3565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6121ab81611ac9565b82525050565b5f6121bc83836121a2565b60208301905092915050565b5f602082019050919050565b5f6121de82612179565b6121e88185612183565b93506121f383612193565b805f5b8381101561222357815161220a88826121b1565b9750612215836121c8565b9250506001810190506121f6565b5085935050505092915050565b5f6020820190508181035f83015261224881846121d4565b905092915050565b5f805f6060848603121561226757612266611a67565b5b5f61227486828701611ab5565b935050602084013567ffffffffffffffff81111561229557612294611a6b565b5b6122a186828701611de3565b925050604084013567ffffffffffffffff8111156122c2576122c1611a6b565b5b6122ce86828701611de3565b9150509250925092565b5f805f80608085870312156122f0576122ef611a67565b5b5f6122fd87828801611ab5565b945050602061230e87828801611ae8565b935050604061231f87828801611ae8565b925050606085013567ffffffffffffffff8111156123405761233f611a6b565b5b61234c87828801611e93565b91505092959194509250565b61236181611a8e565b82525050565b5f60208201905061237a5f830184612358565b92915050565b61238981611be2565b8114612393575f80fd5b50565b5f813590506123a481612380565b92915050565b5f80604083850312156123c0576123bf611a67565b5b5f6123cd85828601611ab5565b92505060206123de85828601612396565b9150509250929050565b5f80604083850312156123fe576123fd611a67565b5b5f61240b85828601611ab5565b925050602061241c85828601611ab5565b9150509250929050565b5f805f805f60a0868803121561243f5761243e611a67565b5b5f61244c88828901611ab5565b955050602061245d88828901611ab5565b945050604061246e88828901611ae8565b935050606061247f88828901611ae8565b925050608086013567ffffffffffffffff8111156124a05761249f611a6b565b5b6124ac88828901611e93565b9150509295509295909350565b5f602082840312156124ce576124cd611a67565b5b5f6124db84828501611ab5565b91505092915050565b5f805f606084860312156124fb576124fa611a67565b5b5f61250886828701611ab5565b935050602061251986828701611ae8565b925050604061252a86828701611ae8565b9150509250925092565b5f6040820190506125475f830185612358565b6125546020830184612358565b9392505050565b5f60408201905061256e5f830185611b3a565b61257b6020830184611b3a565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4f6e6c7920746f6b656e206f776e65722063616e206275726e20746f6b656e735f82015250565b5f6125e3602083611c4a565b91506125ee826125af565b602082019050919050565b5f6020820190508181035f830152612610816125d7565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061265b57607f821691505b60208210810361266e5761266d612617565b5b50919050565b5f6080820190506126875f830187612358565b6126946020830186611b3a565b6126a16040830185611b3a565b6126ae6060830184611b3a565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6126ee82611ac9565b91506126f983611ac9565b9250828201905080821115612711576127106126b7565b5b92915050565b5f6040820190508181035f83015261272f81856121d4565b9050818103602083015261274381846121d4565b90509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f6127708261274c565b61277a8185612756565b935061278a818560208601611c5a565b61279381611c68565b840191505092915050565b5f60a0820190506127b15f830188612358565b6127be6020830187612358565b6127cb6040830186611b3a565b6127d86060830185611b3a565b81810360808301526127ea8184612766565b90509695505050505050565b5f8151905061280481611b8d565b92915050565b5f6020828403121561281f5761281e611a67565b5b5f61282c848285016127f6565b91505092915050565b5f60a0820190506128485f830188612358565b6128556020830187612358565b818103604083015261286781866121d4565b9050818103606083015261287b81856121d4565b9050818103608083015261288f8184612766565b9050969550505050505056fe687474703a2f2f3132372e302e302e313a383038302f697066732f516d643569467469396d695774734775696a7841686e583859723173724b6e4a585a72727275486d324e754434363f66696c656e616d653d73776f72642e706e67687474703a2f2f3132372e302e302e313a383038302f697066732f516d643767434d3248416d31425a57454b4c6e526b5362626b386654694c5a324c785454596e345a4339696b7a783f66696c656e616d653d676f6c642e706e67687474703a2f2f3132372e302e302e313a383038302f697066732f516d546744587556746e4c343958616b4365527a654e6d4562597762506e65335a464e6773447372417a754d316b3f66696c656e616d653d73696c7665722e706e67687474703a2f2f3132372e302e302e313a383038302f697066732f516d564638614568426e64537a6d6b4e4336334556557353635a68636752454e333843565936554632787146334a3f66696c656e616d653d736869656c642e706e67a264697066735822122018a69c4fee50996628d2a4835de854e043f18e8bde8ca4a8dd4fd42e2fdcd3eb64736f6c634300081a0033687474703a2f2f3132372e302e302e313a383038302f697066732f7b69647d3f66696c656e616d653d",
}

// MyERC1155TokenABI is the input ABI used to generate the binding from.
// Deprecated: Use MyERC1155TokenMetaData.ABI instead.
var MyERC1155TokenABI = MyERC1155TokenMetaData.ABI

// MyERC1155TokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MyERC1155TokenMetaData.Bin instead.
var MyERC1155TokenBin = MyERC1155TokenMetaData.Bin

// DeployMyERC1155Token deploys a new Ethereum contract, binding an instance of MyERC1155Token to it.
func DeployMyERC1155Token(auth *bind.TransactOpts, backend bind.ContractBackend, initialOwner common.Address) (common.Address, *types.Transaction, *MyERC1155Token, error) {
	parsed, err := MyERC1155TokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MyERC1155TokenBin), backend, initialOwner)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MyERC1155Token{MyERC1155TokenCaller: MyERC1155TokenCaller{contract: contract}, MyERC1155TokenTransactor: MyERC1155TokenTransactor{contract: contract}, MyERC1155TokenFilterer: MyERC1155TokenFilterer{contract: contract}}, nil
}

// MyERC1155Token is an auto generated Go binding around an Ethereum contract.
type MyERC1155Token struct {
	MyERC1155TokenCaller     // Read-only binding to the contract
	MyERC1155TokenTransactor // Write-only binding to the contract
	MyERC1155TokenFilterer   // Log filterer for contract events
}

// MyERC1155TokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type MyERC1155TokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MyERC1155TokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MyERC1155TokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MyERC1155TokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MyERC1155TokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MyERC1155TokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MyERC1155TokenSession struct {
	Contract     *MyERC1155Token   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MyERC1155TokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MyERC1155TokenCallerSession struct {
	Contract *MyERC1155TokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// MyERC1155TokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MyERC1155TokenTransactorSession struct {
	Contract     *MyERC1155TokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// MyERC1155TokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type MyERC1155TokenRaw struct {
	Contract *MyERC1155Token // Generic contract binding to access the raw methods on
}

// MyERC1155TokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MyERC1155TokenCallerRaw struct {
	Contract *MyERC1155TokenCaller // Generic read-only contract binding to access the raw methods on
}

// MyERC1155TokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MyERC1155TokenTransactorRaw struct {
	Contract *MyERC1155TokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMyERC1155Token creates a new instance of MyERC1155Token, bound to a specific deployed contract.
func NewMyERC1155Token(address common.Address, backend bind.ContractBackend) (*MyERC1155Token, error) {
	contract, err := bindMyERC1155Token(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MyERC1155Token{MyERC1155TokenCaller: MyERC1155TokenCaller{contract: contract}, MyERC1155TokenTransactor: MyERC1155TokenTransactor{contract: contract}, MyERC1155TokenFilterer: MyERC1155TokenFilterer{contract: contract}}, nil
}

// NewMyERC1155TokenCaller creates a new read-only instance of MyERC1155Token, bound to a specific deployed contract.
func NewMyERC1155TokenCaller(address common.Address, caller bind.ContractCaller) (*MyERC1155TokenCaller, error) {
	contract, err := bindMyERC1155Token(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MyERC1155TokenCaller{contract: contract}, nil
}

// NewMyERC1155TokenTransactor creates a new write-only instance of MyERC1155Token, bound to a specific deployed contract.
func NewMyERC1155TokenTransactor(address common.Address, transactor bind.ContractTransactor) (*MyERC1155TokenTransactor, error) {
	contract, err := bindMyERC1155Token(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MyERC1155TokenTransactor{contract: contract}, nil
}

// NewMyERC1155TokenFilterer creates a new log filterer instance of MyERC1155Token, bound to a specific deployed contract.
func NewMyERC1155TokenFilterer(address common.Address, filterer bind.ContractFilterer) (*MyERC1155TokenFilterer, error) {
	contract, err := bindMyERC1155Token(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MyERC1155TokenFilterer{contract: contract}, nil
}

// bindMyERC1155Token binds a generic wrapper to an already deployed contract.
func bindMyERC1155Token(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MyERC1155TokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MyERC1155Token *MyERC1155TokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MyERC1155Token.Contract.MyERC1155TokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MyERC1155Token *MyERC1155TokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.MyERC1155TokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MyERC1155Token *MyERC1155TokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.MyERC1155TokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MyERC1155Token *MyERC1155TokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MyERC1155Token.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MyERC1155Token *MyERC1155TokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MyERC1155Token *MyERC1155TokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.contract.Transact(opts, method, params...)
}

// GOLD is a free data retrieval call binding the contract method 0x3e4bee38.
//
// Solidity: function GOLD() view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenCaller) GOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MyERC1155Token.contract.Call(opts, &out, "GOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GOLD is a free data retrieval call binding the contract method 0x3e4bee38.
//
// Solidity: function GOLD() view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenSession) GOLD() (*big.Int, error) {
	return _MyERC1155Token.Contract.GOLD(&_MyERC1155Token.CallOpts)
}

// GOLD is a free data retrieval call binding the contract method 0x3e4bee38.
//
// Solidity: function GOLD() view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenCallerSession) GOLD() (*big.Int, error) {
	return _MyERC1155Token.Contract.GOLD(&_MyERC1155Token.CallOpts)
}

// SHIELD is a free data retrieval call binding the contract method 0x5b2725ed.
//
// Solidity: function SHIELD() view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenCaller) SHIELD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MyERC1155Token.contract.Call(opts, &out, "SHIELD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SHIELD is a free data retrieval call binding the contract method 0x5b2725ed.
//
// Solidity: function SHIELD() view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenSession) SHIELD() (*big.Int, error) {
	return _MyERC1155Token.Contract.SHIELD(&_MyERC1155Token.CallOpts)
}

// SHIELD is a free data retrieval call binding the contract method 0x5b2725ed.
//
// Solidity: function SHIELD() view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenCallerSession) SHIELD() (*big.Int, error) {
	return _MyERC1155Token.Contract.SHIELD(&_MyERC1155Token.CallOpts)
}

// SILVER is a free data retrieval call binding the contract method 0xe3e55f08.
//
// Solidity: function SILVER() view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenCaller) SILVER(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MyERC1155Token.contract.Call(opts, &out, "SILVER")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SILVER is a free data retrieval call binding the contract method 0xe3e55f08.
//
// Solidity: function SILVER() view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenSession) SILVER() (*big.Int, error) {
	return _MyERC1155Token.Contract.SILVER(&_MyERC1155Token.CallOpts)
}

// SILVER is a free data retrieval call binding the contract method 0xe3e55f08.
//
// Solidity: function SILVER() view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenCallerSession) SILVER() (*big.Int, error) {
	return _MyERC1155Token.Contract.SILVER(&_MyERC1155Token.CallOpts)
}

// SWORD is a free data retrieval call binding the contract method 0x13dc989f.
//
// Solidity: function SWORD() view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenCaller) SWORD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MyERC1155Token.contract.Call(opts, &out, "SWORD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SWORD is a free data retrieval call binding the contract method 0x13dc989f.
//
// Solidity: function SWORD() view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenSession) SWORD() (*big.Int, error) {
	return _MyERC1155Token.Contract.SWORD(&_MyERC1155Token.CallOpts)
}

// SWORD is a free data retrieval call binding the contract method 0x13dc989f.
//
// Solidity: function SWORD() view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenCallerSession) SWORD() (*big.Int, error) {
	return _MyERC1155Token.Contract.SWORD(&_MyERC1155Token.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MyERC1155Token.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _MyERC1155Token.Contract.BalanceOf(&_MyERC1155Token.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_MyERC1155Token *MyERC1155TokenCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _MyERC1155Token.Contract.BalanceOf(&_MyERC1155Token.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_MyERC1155Token *MyERC1155TokenCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _MyERC1155Token.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_MyERC1155Token *MyERC1155TokenSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _MyERC1155Token.Contract.BalanceOfBatch(&_MyERC1155Token.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_MyERC1155Token *MyERC1155TokenCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _MyERC1155Token.Contract.BalanceOfBatch(&_MyERC1155Token.CallOpts, accounts, ids)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_MyERC1155Token *MyERC1155TokenCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _MyERC1155Token.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_MyERC1155Token *MyERC1155TokenSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _MyERC1155Token.Contract.IsApprovedForAll(&_MyERC1155Token.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_MyERC1155Token *MyERC1155TokenCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _MyERC1155Token.Contract.IsApprovedForAll(&_MyERC1155Token.CallOpts, account, operator)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MyERC1155Token *MyERC1155TokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MyERC1155Token.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MyERC1155Token *MyERC1155TokenSession) Owner() (common.Address, error) {
	return _MyERC1155Token.Contract.Owner(&_MyERC1155Token.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MyERC1155Token *MyERC1155TokenCallerSession) Owner() (common.Address, error) {
	return _MyERC1155Token.Contract.Owner(&_MyERC1155Token.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MyERC1155Token *MyERC1155TokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _MyERC1155Token.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MyERC1155Token *MyERC1155TokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MyERC1155Token.Contract.SupportsInterface(&_MyERC1155Token.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MyERC1155Token *MyERC1155TokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MyERC1155Token.Contract.SupportsInterface(&_MyERC1155Token.CallOpts, interfaceId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_MyERC1155Token *MyERC1155TokenCaller) Uri(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _MyERC1155Token.contract.Call(opts, &out, "uri", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_MyERC1155Token *MyERC1155TokenSession) Uri(tokenId *big.Int) (string, error) {
	return _MyERC1155Token.Contract.Uri(&_MyERC1155Token.CallOpts, tokenId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_MyERC1155Token *MyERC1155TokenCallerSession) Uri(tokenId *big.Int) (string, error) {
	return _MyERC1155Token.Contract.Uri(&_MyERC1155Token.CallOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address from, uint256 id, uint256 amount) returns()
func (_MyERC1155Token *MyERC1155TokenTransactor) Burn(opts *bind.TransactOpts, from common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _MyERC1155Token.contract.Transact(opts, "burn", from, id, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address from, uint256 id, uint256 amount) returns()
func (_MyERC1155Token *MyERC1155TokenSession) Burn(from common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.Burn(&_MyERC1155Token.TransactOpts, from, id, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address from, uint256 id, uint256 amount) returns()
func (_MyERC1155Token *MyERC1155TokenTransactorSession) Burn(from common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.Burn(&_MyERC1155Token.TransactOpts, from, id, amount)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address from, uint256[] ids, uint256[] amounts) returns()
func (_MyERC1155Token *MyERC1155TokenTransactor) BurnBatch(opts *bind.TransactOpts, from common.Address, ids []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _MyERC1155Token.contract.Transact(opts, "burnBatch", from, ids, amounts)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address from, uint256[] ids, uint256[] amounts) returns()
func (_MyERC1155Token *MyERC1155TokenSession) BurnBatch(from common.Address, ids []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.BurnBatch(&_MyERC1155Token.TransactOpts, from, ids, amounts)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address from, uint256[] ids, uint256[] amounts) returns()
func (_MyERC1155Token *MyERC1155TokenTransactorSession) BurnBatch(from common.Address, ids []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.BurnBatch(&_MyERC1155Token.TransactOpts, from, ids, amounts)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address to, uint256 id, uint256 amount, bytes data) returns()
func (_MyERC1155Token *MyERC1155TokenTransactor) Mint(opts *bind.TransactOpts, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _MyERC1155Token.contract.Transact(opts, "mint", to, id, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address to, uint256 id, uint256 amount, bytes data) returns()
func (_MyERC1155Token *MyERC1155TokenSession) Mint(to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.Mint(&_MyERC1155Token.TransactOpts, to, id, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address to, uint256 id, uint256 amount, bytes data) returns()
func (_MyERC1155Token *MyERC1155TokenTransactorSession) Mint(to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.Mint(&_MyERC1155Token.TransactOpts, to, id, amount, data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x1f7fdffa.
//
// Solidity: function mintBatch(address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_MyERC1155Token *MyERC1155TokenTransactor) MintBatch(opts *bind.TransactOpts, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _MyERC1155Token.contract.Transact(opts, "mintBatch", to, ids, amounts, data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x1f7fdffa.
//
// Solidity: function mintBatch(address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_MyERC1155Token *MyERC1155TokenSession) MintBatch(to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.MintBatch(&_MyERC1155Token.TransactOpts, to, ids, amounts, data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x1f7fdffa.
//
// Solidity: function mintBatch(address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_MyERC1155Token *MyERC1155TokenTransactorSession) MintBatch(to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.MintBatch(&_MyERC1155Token.TransactOpts, to, ids, amounts, data)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MyERC1155Token *MyERC1155TokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MyERC1155Token.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MyERC1155Token *MyERC1155TokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _MyERC1155Token.Contract.RenounceOwnership(&_MyERC1155Token.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MyERC1155Token *MyERC1155TokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _MyERC1155Token.Contract.RenounceOwnership(&_MyERC1155Token.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values, bytes data) returns()
func (_MyERC1155Token *MyERC1155TokenTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.Transaction, error) {
	return _MyERC1155Token.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, values, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values, bytes data) returns()
func (_MyERC1155Token *MyERC1155TokenSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.SafeBatchTransferFrom(&_MyERC1155Token.TransactOpts, from, to, ids, values, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values, bytes data) returns()
func (_MyERC1155Token *MyERC1155TokenTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.SafeBatchTransferFrom(&_MyERC1155Token.TransactOpts, from, to, ids, values, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes data) returns()
func (_MyERC1155Token *MyERC1155TokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MyERC1155Token.contract.Transact(opts, "safeTransferFrom", from, to, id, value, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes data) returns()
func (_MyERC1155Token *MyERC1155TokenSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.SafeTransferFrom(&_MyERC1155Token.TransactOpts, from, to, id, value, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes data) returns()
func (_MyERC1155Token *MyERC1155TokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.SafeTransferFrom(&_MyERC1155Token.TransactOpts, from, to, id, value, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_MyERC1155Token *MyERC1155TokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _MyERC1155Token.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_MyERC1155Token *MyERC1155TokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.SetApprovalForAll(&_MyERC1155Token.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_MyERC1155Token *MyERC1155TokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.SetApprovalForAll(&_MyERC1155Token.TransactOpts, operator, approved)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MyERC1155Token *MyERC1155TokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MyERC1155Token.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MyERC1155Token *MyERC1155TokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.TransferOwnership(&_MyERC1155Token.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MyERC1155Token *MyERC1155TokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MyERC1155Token.Contract.TransferOwnership(&_MyERC1155Token.TransactOpts, newOwner)
}

// MyERC1155TokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the MyERC1155Token contract.
type MyERC1155TokenApprovalForAllIterator struct {
	Event *MyERC1155TokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MyERC1155TokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MyERC1155TokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MyERC1155TokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MyERC1155TokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MyERC1155TokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MyERC1155TokenApprovalForAll represents a ApprovalForAll event raised by the MyERC1155Token contract.
type MyERC1155TokenApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_MyERC1155Token *MyERC1155TokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*MyERC1155TokenApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _MyERC1155Token.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &MyERC1155TokenApprovalForAllIterator{contract: _MyERC1155Token.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_MyERC1155Token *MyERC1155TokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *MyERC1155TokenApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _MyERC1155Token.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MyERC1155TokenApprovalForAll)
				if err := _MyERC1155Token.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_MyERC1155Token *MyERC1155TokenFilterer) ParseApprovalForAll(log types.Log) (*MyERC1155TokenApprovalForAll, error) {
	event := new(MyERC1155TokenApprovalForAll)
	if err := _MyERC1155Token.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MyERC1155TokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the MyERC1155Token contract.
type MyERC1155TokenOwnershipTransferredIterator struct {
	Event *MyERC1155TokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MyERC1155TokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MyERC1155TokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MyERC1155TokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MyERC1155TokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MyERC1155TokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MyERC1155TokenOwnershipTransferred represents a OwnershipTransferred event raised by the MyERC1155Token contract.
type MyERC1155TokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MyERC1155Token *MyERC1155TokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MyERC1155TokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MyERC1155Token.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MyERC1155TokenOwnershipTransferredIterator{contract: _MyERC1155Token.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MyERC1155Token *MyERC1155TokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MyERC1155TokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MyERC1155Token.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MyERC1155TokenOwnershipTransferred)
				if err := _MyERC1155Token.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MyERC1155Token *MyERC1155TokenFilterer) ParseOwnershipTransferred(log types.Log) (*MyERC1155TokenOwnershipTransferred, error) {
	event := new(MyERC1155TokenOwnershipTransferred)
	if err := _MyERC1155Token.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MyERC1155TokenTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the MyERC1155Token contract.
type MyERC1155TokenTransferBatchIterator struct {
	Event *MyERC1155TokenTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MyERC1155TokenTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MyERC1155TokenTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MyERC1155TokenTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MyERC1155TokenTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MyERC1155TokenTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MyERC1155TokenTransferBatch represents a TransferBatch event raised by the MyERC1155Token contract.
type MyERC1155TokenTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_MyERC1155Token *MyERC1155TokenFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*MyERC1155TokenTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MyERC1155Token.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MyERC1155TokenTransferBatchIterator{contract: _MyERC1155Token.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_MyERC1155Token *MyERC1155TokenFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *MyERC1155TokenTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MyERC1155Token.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MyERC1155TokenTransferBatch)
				if err := _MyERC1155Token.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_MyERC1155Token *MyERC1155TokenFilterer) ParseTransferBatch(log types.Log) (*MyERC1155TokenTransferBatch, error) {
	event := new(MyERC1155TokenTransferBatch)
	if err := _MyERC1155Token.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MyERC1155TokenTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the MyERC1155Token contract.
type MyERC1155TokenTransferSingleIterator struct {
	Event *MyERC1155TokenTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MyERC1155TokenTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MyERC1155TokenTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MyERC1155TokenTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MyERC1155TokenTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MyERC1155TokenTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MyERC1155TokenTransferSingle represents a TransferSingle event raised by the MyERC1155Token contract.
type MyERC1155TokenTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_MyERC1155Token *MyERC1155TokenFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*MyERC1155TokenTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MyERC1155Token.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MyERC1155TokenTransferSingleIterator{contract: _MyERC1155Token.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_MyERC1155Token *MyERC1155TokenFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *MyERC1155TokenTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MyERC1155Token.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MyERC1155TokenTransferSingle)
				if err := _MyERC1155Token.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_MyERC1155Token *MyERC1155TokenFilterer) ParseTransferSingle(log types.Log) (*MyERC1155TokenTransferSingle, error) {
	event := new(MyERC1155TokenTransferSingle)
	if err := _MyERC1155Token.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MyERC1155TokenURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the MyERC1155Token contract.
type MyERC1155TokenURIIterator struct {
	Event *MyERC1155TokenURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MyERC1155TokenURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MyERC1155TokenURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MyERC1155TokenURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MyERC1155TokenURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MyERC1155TokenURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MyERC1155TokenURI represents a URI event raised by the MyERC1155Token contract.
type MyERC1155TokenURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_MyERC1155Token *MyERC1155TokenFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*MyERC1155TokenURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _MyERC1155Token.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &MyERC1155TokenURIIterator{contract: _MyERC1155Token.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_MyERC1155Token *MyERC1155TokenFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *MyERC1155TokenURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _MyERC1155Token.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MyERC1155TokenURI)
				if err := _MyERC1155Token.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_MyERC1155Token *MyERC1155TokenFilterer) ParseURI(log types.Log) (*MyERC1155TokenURI, error) {
	event := new(MyERC1155TokenURI)
	if err := _MyERC1155Token.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
